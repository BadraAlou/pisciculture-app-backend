# Generated by Django 5.1.2 on 2024-11-09 23:12

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CycleProduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.today, verbose_name='Date de mise en charge')),
                ('nom', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Ferme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
                ('coordonnees', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Pisciculteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricule', models.CharField(blank=True, max_length=20, unique=True)),
                ('nom', models.CharField(max_length=50)),
                ('prenom', models.CharField(max_length=50)),
                ('telephone', models.CharField(blank=True, max_length=50, unique=True)),
                ('adresse', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=50, unique=True)),
                ('genre', models.CharField(blank=True, choices=[('H', 'HOMME'), ('F', 'FEMME')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='TypeAlevin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeInfrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=50, null=True)),
                ('pays', models.CharField(blank=True, max_length=50)),
                ('region', models.CharField(blank=True, max_length=50)),
                ('cercle', models.CharField(blank=True, max_length=50)),
                ('commune', models.CharField(blank=True, max_length=50)),
                ('ville', models.CharField(blank=True, max_length=50)),
                ('quartier', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Alevin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombreTilapia', models.PositiveIntegerField(default=0, verbose_name='Nombre Tilapia')),
                ('nombreClaria', models.PositiveIntegerField(default=0, verbose_name='Nombre Claria')),
                ('nombreAutres', models.PositiveIntegerField(default=0, verbose_name='Nombre Autres')),
                ('coutAchatTilapia', models.FloatField(default=0, verbose_name='Coût Achat Tilapia')),
                ('coutAchatClaria', models.PositiveIntegerField(default=0, verbose_name='Coût Achat Claria')),
                ('coutAchatAutres', models.PositiveIntegerField(default=0, verbose_name='Coût Achat Autres')),
                ('mortaliteTilapia', models.PositiveIntegerField(default=0, verbose_name='Mortalité Tilapia')),
                ('mortaliteClaria', models.PositiveIntegerField(default=0, verbose_name='Mortalité Claria')),
                ('mortaliteAutres', models.PositiveIntegerField(default=0, verbose_name='Mortalité Autres')),
                ('remplaceMortaliteTilapia', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalité Tilapia')),
                ('remplaceMortaliteClaria', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalité Claria')),
                ('remplaceMortaliteAutres', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalité Autres')),
                ('biomasseTilapia', models.PositiveIntegerField(default=0, verbose_name='Biomasse Tilapia')),
                ('biomasseClaria', models.PositiveIntegerField(default=0, verbose_name='Biomasse Claria')),
                ('biomasseAutres', models.PositiveIntegerField(default=0, verbose_name='Biomasse Autres')),
                ('poidsMoyenTilapia', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Tilapia')),
                ('poidsMoyenClaria', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Claria')),
                ('poidsMoyenAutres', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Autres')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
            ],
        ),
        migrations.AddField(
            model_name='cycleproduction',
            name='ferme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.ferme'),
        ),
        migrations.CreateModel(
            name='PecheControle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.today)),
                ('nombreEchantillons', models.PositiveIntegerField(default=0, verbose_name="Nombre d'échantillons")),
                ('nombreTotalPoissonsEchantillonnes', models.PositiveIntegerField(default=0, verbose_name='Nombre total poissons échantillonnés')),
                ('poidsTotalEchantillons', models.FloatField(default=0, verbose_name='Poids moyen')),
                ('poidsMoyen', models.FloatField(default=0, verbose_name='Poids Total des echantillons')),
                ('prisePoidsTotal', models.FloatField(default=0, verbose_name='Prise poids total')),
                ('biomasse', models.PositiveIntegerField(default=0, verbose_name='Biomasse')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
            ],
        ),
        migrations.AddField(
            model_name='ferme',
            name='pisciculteur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.pisciculteur'),
        ),
        migrations.CreateModel(
            name='RationJournaliere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=50, verbose_name='Nom Ration Journalière')),
                ('aliment1', models.FloatField(default=0, verbose_name='Aliment 1')),
                ('aliment2', models.FloatField(default=0, verbose_name='Aliment 2')),
                ('aliment3', models.FloatField(default=0, verbose_name='Aliment 3')),
                ('aliment4', models.FloatField(default=0, verbose_name='Aliment 4')),
                ('aliment5', models.FloatField(default=0, verbose_name='Aliment 5')),
                ('produit1', models.FloatField(blank=True, default=0, verbose_name='Produit 1')),
                ('produit2', models.FloatField(blank=True, default=0, verbose_name='Produit 2')),
                ('produit3', models.FloatField(blank=True, default=0, verbose_name='Produit 3')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
            ],
        ),
        migrations.CreateModel(
            name='Recolte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateVenteTilapia', models.DateField(default=datetime.datetime.today, verbose_name='Date de vente')),
                ('poidsTotalVenteTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteTilapia', models.FloatField(blank=True, default=0, verbose_name='Recette')),
                ('dateDonTilapia', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total donné')),
                ('dateAutoConsommationTilapia', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('dateVenteClarias', models.DateField(default=datetime.datetime.today, verbose_name='Date de vente')),
                ('poidsTotalVenteClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteClarias', models.FloatField(blank=True, default=0, verbose_name='Recette')),
                ('dateDonClarias', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total donné')),
                ('dateAutoConsommationClarias', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('dateVenteAutres', models.DateField(default=datetime.datetime.today, verbose_name='Date de vente')),
                ('poidsTotalVenteAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteAutres', models.FloatField(blank=True, default=0, verbose_name='Recette')),
                ('dateDonAutres', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total donné')),
                ('dateAutoConsommationAutres', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
            ],
        ),
        migrations.CreateModel(
            name='Infrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.CharField(max_length=20)),
                ('superficie', models.FloatField(default=0)),
                ('volume', models.FloatField(default=0)),
                ('dateConstruction', models.DateField(blank=True, null=True)),
                ('dateReabilitation', models.DateField(blank=True, null=True)),
                ('natureReabilitation', models.CharField(blank=True, max_length=50)),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('typeInfrastructure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.typeinfrastructure')),
            ],
        ),
        migrations.AddField(
            model_name='ferme',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.zone'),
        ),
    ]
