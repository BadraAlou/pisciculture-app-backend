# Generated by Django 5.1.2 on 2025-05-31 00:11

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aliment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, verbose_name='Aliment')),
                ('quantite', models.FloatField(default=0)),
                ('prix', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment')),
            ],
        ),
        migrations.CreateModel(
            name='Cercle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CycleProduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.today, verbose_name='Date de mise en charge')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date de fin de cycle')),
                ('nom', models.CharField(blank=True, max_length=50)),
                ('cycle', models.CharField(choices=[('ENCOURS', 'ENCOURS'), ('TERMINE', 'TERMINE')], default='ENCOURS', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Ferme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
                ('coordonnees', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Produit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, verbose_name='Produit')),
                ('quantite', models.FloatField(default=0)),
                ('prix', models.PositiveIntegerField(default=0, verbose_name='Prix Produit')),
            ],
        ),
        migrations.CreateModel(
            name='Quartier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TypeAlevin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeInfrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=50, null=True)),
                ('pays', models.CharField(blank=True, max_length=50)),
                ('region', models.CharField(blank=True, max_length=50)),
                ('cercle', models.CharField(blank=True, max_length=50)),
                ('commune', models.CharField(blank=True, max_length=50)),
                ('ville', models.CharField(blank=True, max_length=50)),
                ('quartier', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('cercle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cercle')),
            ],
        ),
        migrations.CreateModel(
            name='Controlleur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categorie', models.CharField(choices=[('AE', 'AGENT ENCADREMENT'), ('CS', 'CHEF SECTEUR'), ('DR', 'DIRECTEUR REGIONALE'), ('S', 'SUPERVISEUR')], max_length=2)),
                ('nom', models.CharField(max_length=50)),
                ('prenom', models.CharField(max_length=50)),
                ('adresse', models.CharField(blank=True, max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='controlleur_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eau', models.PositiveIntegerField(default=0, verbose_name='Total Eau')),
                ('main_oeuvre', models.PositiveIntegerField(default=0, verbose_name="Total Main d'oeuvre")),
                ('amortissements', models.PositiveIntegerField(default=0, verbose_name='Total Amortissement')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
            ],
        ),
        migrations.AddField(
            model_name='cycleproduction',
            name='ferme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.ferme'),
        ),
        migrations.CreateModel(
            name='Infrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.CharField(max_length=20)),
                ('superficie', models.FloatField(default=0)),
                ('volume', models.FloatField(default=0)),
                ('dateConstruction', models.DateField(blank=True, null=True)),
                ('dateReabilitation', models.DateField(blank=True, null=True)),
                ('natureReabilitation', models.CharField(blank=True, max_length=50)),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('typeInfrastructure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.typeinfrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='Alevin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombreTilapia', models.PositiveIntegerField(default=0, verbose_name='Nombre Tilapia')),
                ('nombreClaria', models.PositiveIntegerField(default=0, verbose_name='Nombre Claria')),
                ('nombreAutres', models.PositiveIntegerField(default=0, verbose_name='Nombre Autres')),
                ('coutAchatTilapia', models.PositiveIntegerField(default=0, verbose_name='Co√ªt Achat Tilapia')),
                ('coutAchatClaria', models.PositiveIntegerField(default=0, verbose_name='Co√ªt Achat Claria')),
                ('coutAchatAutres', models.PositiveIntegerField(default=0, verbose_name='Co√ªt Achat Autres')),
                ('mortaliteTilapia', models.PositiveIntegerField(default=0, verbose_name='Mortalit√© Tilapia')),
                ('mortaliteClaria', models.PositiveIntegerField(default=0, verbose_name='Mortalit√© Claria')),
                ('mortaliteAutres', models.PositiveIntegerField(default=0, verbose_name='Mortalit√© Autres')),
                ('remplaceMortaliteTilapia', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalit√© Tilapia')),
                ('remplaceMortaliteClaria', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalit√© Claria')),
                ('remplaceMortaliteAutres', models.PositiveIntegerField(default=0, verbose_name='Remplace Mortalit√© Autres')),
                ('poidsMoyenTilapia', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Tilapia')),
                ('poidsMoyenClaria', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Claria')),
                ('poidsMoyenAutres', models.PositiveIntegerField(default=0, verbose_name='Poids Moyen Autres')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('infrastructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gestionferme.infrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='PecheControle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.today)),
                ('nombreEchantillons', models.PositiveIntegerField(default=0, verbose_name="Nombre d'√©chantillons")),
                ('nombreTotalPoissonsEchantillonnes', models.PositiveIntegerField(default=0, verbose_name='Nombre total poissons √©chantillonn√©s')),
                ('poidsTotalEchantillons', models.FloatField(default=0, verbose_name='Poids moyen')),
                ('poidsMoyen', models.FloatField(default=0, verbose_name='Poids Total des echantillons')),
                ('prisePoidsTotal', models.FloatField(default=0, verbose_name='Prise poids total')),
                ('biomasse', models.PositiveIntegerField(default=0, verbose_name='Biomasse')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('infrastructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gestionferme.infrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='Pisciculteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricule', models.CharField(blank=True, max_length=20, unique=True)),
                ('nom', models.CharField(max_length=50)),
                ('prenom', models.CharField(max_length=50)),
                ('adresse', models.CharField(blank=True, max_length=50)),
                ('genre', models.CharField(blank=True, choices=[('H', 'HOMME'), ('F', 'FEMME')], max_length=1)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pisciculteur_profile', to=settings.AUTH_USER_MODEL)),
                ('quartier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gestionferme.quartier')),
            ],
        ),
        migrations.AddField(
            model_name='ferme',
            name='pisciculteur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.pisciculteur'),
        ),
        migrations.CreateModel(
            name='RationJournaliere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=50, verbose_name='Nom Ration Journali√®re')),
                ('aliment1', models.FloatField(default=0, verbose_name='Aliment 1')),
                ('prixAliment1', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment 1')),
                ('aliment2', models.FloatField(default=0, verbose_name='Aliment 2')),
                ('prixAliment2', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment 2')),
                ('aliment3', models.FloatField(default=0, verbose_name='Aliment 3')),
                ('prixAliment3', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment 3')),
                ('aliment4', models.FloatField(default=0, verbose_name='Aliment 4')),
                ('prixAliment4', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment 4')),
                ('aliment5', models.FloatField(default=0, verbose_name='Aliment 5')),
                ('prixAliment5', models.PositiveIntegerField(default=0, verbose_name='Prix Aliment 5')),
                ('produit1', models.FloatField(blank=True, default=0, verbose_name='Produit 1')),
                ('prixProduit1', models.PositiveIntegerField(default=0, verbose_name='Prix Produit 1')),
                ('produit2', models.FloatField(blank=True, default=0, verbose_name='Produit 2')),
                ('prixProduit2', models.PositiveIntegerField(default=0, verbose_name='Prix Produit 2')),
                ('produit3', models.FloatField(blank=True, default=0, verbose_name='Produit 3')),
                ('prixProduit3', models.PositiveIntegerField(default=0, verbose_name='Prix Produit 3')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('infrastructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gestionferme.infrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='Recolte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateVenteTilapia', models.DateField(default=datetime.datetime.today, verbose_name='Tilapia - Date vente')),
                ('poidsTotalVenteTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteTilapia', models.FloatField(blank=True, default=0, verbose_name='Recette Tilapia')),
                ('dateDonTilapia', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total donn√©')),
                ('dateAutoConsommationTilapia', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationTilapia', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('dateVenteClarias', models.DateField(default=datetime.datetime.today, verbose_name='Clarias - Date de vente')),
                ('poidsTotalVenteClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteClarias', models.FloatField(blank=True, default=0, verbose_name='Recette Clarias')),
                ('dateDonClarias', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total donn√©')),
                ('dateAutoConsommationClarias', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationClarias', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('dateVenteAutres', models.DateField(default=datetime.datetime.today, verbose_name='Autres - Date de vente')),
                ('poidsTotalVenteAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total vendu')),
                ('recetteAutres', models.FloatField(blank=True, default=0, verbose_name='Recette Autres')),
                ('dateDonAutres', models.DateField(default=datetime.datetime.today, verbose_name='Date de don')),
                ('poidsTotalDonAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total donn√©')),
                ('dateAutoConsommationAutres', models.DateField(default=datetime.datetime.today, verbose_name="Date d'autoconsommation")),
                ('poidsTotalAutoConsommationAutres', models.FloatField(blank=True, default=0, verbose_name='Poids total autoconsommation')),
                ('cycleProduction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.cycleproduction')),
                ('infrastructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gestionferme.infrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('pays', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='gestionferme.pays')),
            ],
        ),
        migrations.AddField(
            model_name='cercle',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cercles', to='gestionferme.region'),
        ),
        migrations.CreateModel(
            name='Ville',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.commune')),
            ],
        ),
        migrations.AddField(
            model_name='quartier',
            name='ville',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.ville'),
        ),
        migrations.AddField(
            model_name='ferme',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestionferme.zone'),
        ),
    ]
